using System.Collections.Generic;using UnityEngine;using UnityEngine.UI;using Sirenix.OdinInspector;using UIM;[AddComponentMenu("UIMaster/Setting/SettingPanel")][DisallowMultipleComponent]public class UIM_SettingPanel : MonoBehaviour{    public static UIM_SettingPanel Instance;    public Transform optionContent;    public GameObject dropDownPrefab,subheadPrefab;    public Dictionary<OptionFuction, OptionEntity> EntityDictionary;    [BoxGroup("功能按钮")]    [LabelText("恢复默认按钮")]    public Button butRestore;    [BoxGroup("功能按钮")]    [LabelText("保存按钮")]    public Button butSave;    private UIM_SettingManager SM;    private OptionStateListSO sData;    private OptionFuctionListSO sOptions;    //先给需要的双头按钮，发布绑定的任务，和初始化。    private void Awake()    {        Instance = this;    }    private void Start()    {        SM = UIM_SettingManager.Instance;        sData = SM.curOptionStateSO;        sOptions = SM.optionFuctionListSO;        //按钮监听        butRestore.onClick.AddListener(SM.OnReSetOptions);        butSave.onClick.AddListener(SM.curOptionStateSO.SaveData);        //下拉选项选项实例化生成        InitializeDDOption();        //读取数据        FreshTwoHead();        //bdLanguage.RefreshShownValue();        //刷新框架        UIM_UIManager.Instance.RefreshLayoutsRecursively();    }    /// <summary>    /// 添加下拉选项    /// </summary>    public void InitializeDDOption()    {        //int first = 0;        //新方法获得        for (int i = 0; i < sOptions.OptionFuctionList.Count; i++)        {            var item = sOptions.OptionFuctionList[i];            //先设定要生成什么            var obj = item is SO_Subheading ? subheadPrefab : dropDownPrefab;            GameObject optionObj = Instantiate(obj, transform);            //如果是button，则需要重置一下navi属性            //if (obj == dropDownPrefab)            //{            //    //Navigation navi =  Navigation.defaultNavigation;            //    optionObj.GetComponent<Button>().navigation = Navigation.defaultNavigation;            //    Debug.Log($"按钮 {optionObj.name} 已被重置NAVI");            //}            optionObj.transform.SetParent(optionContent);            optionObj.transform.localScale = Vector3.one;            ////将第一个按钮赋予给panel            //if (i == first && GetComponent<UIM_PanelManager>())            //{            //    if(item is SO_Subheading)            //    {            //        first++;            //    }            //    else            //    {            //        GetComponent<UIM_PanelManager>().DefaultButton = optionObj;            //    }                              //}            var oe = optionObj.GetComponent<OptionEntity>();            item.InitOptionEntity(oe);        }    }    /// <summary>    /// 刷新子物体组件中的所有双头选项    /// </summary>    public void FreshTwoHead()    {        UIM_ButTwoHead[] twohead = GetComponentsInChildren<UIM_ButTwoHead>();        foreach (var item in twohead)        {            item.FreshButton();        }    }}