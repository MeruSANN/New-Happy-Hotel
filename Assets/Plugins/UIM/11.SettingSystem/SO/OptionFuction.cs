using System.Collections.Generic;using UnityEngine;using Sirenix.OdinInspector;using System;using System.Threading.Tasks;//using UnityEngine.Localization;using TMPro;//using UnityEngine.Localization.Settings;using UnityEngine.Rendering.Universal;using UnityEngine.Rendering;//using UnityEngine.Localization.Components;using UIM.Audio;using UIM;using I2;using I2.Loc;/// <summary>/// 这个类存储设置所需要调用的各种类，也就是选项/// </summary>[Serializable]public abstract class OptionFuction{    [Title("$fuctionName", "$fuctionNotion")]    [LabelText("是否显示")]    public bool isShow = true;    [LabelText("设置名")]    public string fuctionName ;    [LabelText("设置备注")]    public string fuctionNotion;    [LabelText("初始默认值")]    public int defaultValue ;    [LabelText("选项状态")]    [SerializeReference]    public OptionState optionState;    [LabelText("初始不执行")]     public bool NotInitApply = false;        [PreviewField]    public Sprite optionIcon;    [SerializeReference]    [ShowIf("@DD!=null")]    protected TMP_Dropdown DD;    protected LocalizeDropdown I2LocDD;    /// <summary>    /// 创建并初始化Dropdown的方法    /// </summary>    public virtual void InitOptionEntity(OptionEntity dropDownEntity)    {        if (dropDownEntity.optionNameText)        {            dropDownEntity.optionNameText.text = fuctionName;        }        if (dropDownEntity.optionNotionText)        {            dropDownEntity.optionNotionText.text = fuctionNotion;        }        var icon = dropDownEntity.optionIcon.gameObject;        if (optionIcon != null)        {            //Debug.Log("有呀！！！！！！！！！！！");            icon.SetActive(true);            dropDownEntity.optionIcon.sprite = optionIcon;        }        else        {            //Debug.Log("有吗！！！！！！！！！！！");            icon.SetActive(false);        }        //本地化        //LocalizationManager.SetLocalizedString(dropDownEntity.optionNameText.GetComponent<LocalizeStringEvent>(), "id_" + fuctionName);        LocalFunclib.SetLocalizedString(dropDownEntity.optionNameText.GetComponent<Localize>(),"UI/Setting/"+fuctionName);        if (fuctionNotion!=string.Empty)        {            //LocalizationManager.SetLocalizedString(dropDownEntity.optionNotionText.GetComponent<LocalizeStringEvent>(), "id_" + fuctionNotion);            LocalFunclib.SetLocalizedString(dropDownEntity.optionNotionText.GetComponent<Localize>(),"UI/Setting/Notion/"+fuctionNotion);        }         dropDownEntity.gameObject.SetActive(isShow);        if (dropDownEntity.butTwoHead)        {            //为dd监听方法            DD = dropDownEntity.butTwoHead.targetDrop;            DD.ClearOptions();                        I2LocDD = dropDownEntity.butTwoHead.targetDropI2Loc;            I2LocDD._Terms.Clear();                        //值变后写入数据            DD.onValueChanged.AddListener(delegate { SetStateByDD(); });            //值变后调用方法            DD.onValueChanged.AddListener(delegate { OnChangeOption(); });        }    }    /// <summary>    /// 通过获得当前的数据，来先进行具体设置行为    /// </summary>    public async Task InitOptionState()    {        await Task.Yield();                //先初始化状态        optionState = new OptionState(fuctionName, defaultValue);        //从当前设置数据中找到        var loadstate= UIM_SettingManager.Instance.curOptionStateSO.GetStateByOption(this);        if (loadstate != null)        {            optionState.value = loadstate.value;        }        //Debug.LogError($"{optionState.key}准备开始应用:{optionState.value}");        if (NotInitApply == false)        {                        OnChangeOption();            //Debug.LogError($"{optionState.key}已完成设置应用:{optionState.value}");        }            }    /// <summary>    /// 当点击选项改变时，调用的方法，除了立刻修改当前选项    /// </summary>    /// <param name="i"></param>    public virtual void OnChangeOption()    {        //前面会执行各自的方法        UIM_UIManager.Instance.RefreshLayoutsRecursively();    }    #region     /// <summary>    /// 将选项数据写入当前设置    /// </summary>    public void SetStateByDD()    {        if (DD == null || optionState == null) return;        optionState.value = DD.value;    }    /// <summary>    /// 按钮的值,引用已有的数据    /// </summary>    public void SetValueByState()    {        if (DD == null || optionState == null) return;        //Debug.Log($"{DD.value}  传入数据");        //Debug.Log($"{DD.value}  传入值 {optionState.value}");        DD.value = optionState.value;    }    #endregion    #region 布尔、步进两种常用方法    public enum DPmod    {        布尔, 步进    }    protected int sliderStep = 11;    protected void InitiaOptions( DPmod dPmod)    {               if (dPmod == DPmod.布尔)        {            var dataListBool = new List<TMP_Dropdown.OptionData>();            dataListBool.Add(new TMP_Dropdown.OptionData("ON"));            dataListBool.Add(new TMP_Dropdown.OptionData("OFF"));            DD.ClearOptions();            DD.AddOptions(dataListBool);                        I2LocDD.enabled = true;            I2LocDD._Terms.Clear();            I2LocDD._Terms.Add("UI/Button/ON");            I2LocDD._Terms.Add("UI/Button/OFF");        }        else if (dPmod == DPmod.步进)        {            var dataListBool = new List<TMP_Dropdown.OptionData>();            for (int i = 0; i < sliderStep; i++)            {                dataListBool.Add(new TMP_Dropdown.OptionData(i.ToString()));            }            DD.AddOptions(dataListBool);        }        SetValueByState();    }    #endregion}#region 通用/// <summary>/// 语言选项/// </summary>public class SO_Language : OptionFuction{    //public string  optionName = "Language";    //public List<Locale> locales;    public List<string> languagesCodes;        /// <summary>    /// 初始化选项    /// </summary>    public override void  InitOptionEntity(OptionEntity dropDownEntity)    {             base.InitOptionEntity(dropDownEntity);        languagesCodes = I2.Loc.LocalizationManager.GetAllLanguagesCode();          var ddLanguage = dropDownEntity.butTwoHead.targetDrop;        ddLanguage.ClearOptions();                /*//本地化字体        TMP_FontAsset fontAsset = I2.Loc.LocalizationManager.GetTranslatedObjectByTermName<TMP_FontAsset>("font");        //Debug.Log("获取到的字体为："+fontAsset.name);        ddLanguage.captionText.font = fontAsset;*/        var termData = I2.Loc.LocalizationManager.Sources[0].GetTermData("Other/language_name");        //先造一个空的option list        var list = new List<TMP_Dropdown.OptionData>();        for (int i = 0; i < languagesCodes.Count; i++)        {            list.Add(new TMP_Dropdown.OptionData(termData.GetTranslation(i).ToString()));        }        /*Debug.Log($"数据层面的对象个数{list.Count}");*/        /*var list = new List<TMP_Dropdown.OptionData>();        for (int i = 0; i < locales.Count; i++)        {            list.Add(new TMP_Dropdown.OptionData(locales[i].ToString()));        }*/                ddLanguage.AddOptions(list);        /*Debug.Log($"当前选项个数为{ddLanguage.options.Count}");*/        SetValueByState();                /*Debug.Log($"实际{dropDownEntity.butTwoHead.targetDrop.options.Count}");*/    }    public override void OnChangeOption()    {        // 强制加载语言数据        var allLanguages =  I2.Loc.LocalizationManager.GetAllLanguages();        //var allLanguages = I2.Loc.LocalizationManager.GetAllLanguagesCode();            // 检查索引是否越界        if (optionState.value < 0 || optionState.value >= allLanguages.Count)        {            Debug.LogError($"Language index {optionState.value} is out of range! Max index: {allLanguages.Count - 1}");            return; // 或者重置为默认值：optionState.value = 0;        }        var code=I2.Loc.LocalizationManager.GetLanguageCode(allLanguages[optionState.value]);                I2.Loc.LocalizationManager.CurrentLanguageCode = code;                //I2.Loc.LocalizationManager.CurrentLanguageCode = allLanguages[optionState.value];        /*        Debug.Log(I2.Loc.LocalizationManager.CurrentLanguage);        */        base.OnChangeOption();    }}/// <summary>/// 修改当前主题颜色/// </summary>public class SO_Theme : OptionFuction{    //public  string optionName = "Theme";    public List<SO_UIPalette> paletteList;    public override void InitOptionEntity(OptionEntity dropDownEntity)    {        base.InitOptionEntity(dropDownEntity);        var list = new List<TMP_Dropdown.OptionData>();        var fList = paletteList;        for (int i = 0; i < fList.Count; i++)        {            list.Add(new TMP_Dropdown.OptionData(fList[i].paletteName));        }        DD.AddOptions(list);        SetValueByState();    }    public override void OnChangeOption()    {        // 获取 Camera.main（场景中的主相机）        Camera mainCamera = Camera.main;        var newBackgroundColor = paletteList[optionState.value].colors[0];        if (mainCamera != null)        {            // 遍历 mainCamera 的所有子对象            Camera[] childCameras = mainCamera.GetComponentsInChildren<Camera>();            foreach (Camera cam in childCameras)            {                cam.backgroundColor = newBackgroundColor; // 设置背景颜色            }            // 主相机自身也更改背景颜色            mainCamera.backgroundColor = newBackgroundColor;        }        else        {            Debug.Log(UIM_DebugManager.Log("未找到主相机(Camera.main)！", "错误", "相机"));        }        //改变当前调色板了        //Debug.Log($"原本的调色盘为{curPalette},现在已改为{paletteList[optionState.value]}");        UIM_SettingManager.Instance.curPalette = paletteList[optionState.value];        //Debug.Log($"现在的调色盘改完后为{paletteList[optionState.value]}");        UIM_EventManager.TriggerChangeColor(UIM_SettingManager.Instance.curPalette);        base.OnChangeOption();    }}#endregion#region 图像/// <summary>/// 修改全屏/// </summary>public class SO_FullScreen : OptionFuction{    public override void InitOptionEntity(OptionEntity dropDownEntity)    {        base.InitOptionEntity(dropDownEntity);        InitiaOptions( DPmod.布尔);    }    public override void OnChangeOption()    {        var screen = Screen.currentResolution;        /*if (optionState.value == 0)        {            Screen.fullScreenMode = FullScreenMode.FullScreenWindow;        }        else        {            Screen.fullScreenMode = FullScreenMode.Windowed;            UIM_SettingManager.GetOptionFuction<SO_Resolution>().OnChangeOption();        }*/        UIM_SettingManager.GetOptionFuction<SO_Resolution>().OnChangeOption();         base.OnChangeOption();    }}/// <summary>/// 解析度选项/// </summary>public class SO_Resolution : OptionFuction{   // public bool NotInitApply = true;    //public string optionName = "Resolution";    //public int defaultVolume=6;    public List<Vector2> resolutionList = new List<Vector2>()    {        new Vector2(800,600),        new Vector2(1024,768),        new Vector2(1280,720),        new Vector2(1440,900),        new Vector2(1600,1200),        new Vector2(1680,1050),        new Vector2(1920,1080),        new Vector2(1920,1200),        new Vector2(2560,1440),        new Vector2(3440,1440),         new Vector2(3840,2160),    };    public override void InitOptionEntity(OptionEntity dropDownEntity)    {        base.InitOptionEntity(dropDownEntity);        var reList = resolutionList;        var list = new List<TMP_Dropdown.OptionData>();        for (int i = 0; i < reList.Count; i++)        {            list.Add(new TMP_Dropdown.OptionData(reList[i].x + "x" + reList[i].y));        }        DD.AddOptions(list);        SetValueByState();    }    public override async void OnChangeOption()    {        await Task.Yield();        var v2 = resolutionList[optionState.value];                 // 修改分辨率       // Screen.SetResolution((int)v2.x, (int)v2.y,UIM_SettingManager.GetValueByOption<SO_FullScreen>()==0?true:false);        var mode = UIM_SettingManager.GetValueByOption<SO_FullScreen>() == 0            ? FullScreenMode.FullScreenWindow            : FullScreenMode.Windowed;                                        Screen.SetResolution((int)v2.x, (int)v2.y,mode);        //Debug.LogError(Screen.currentResolution+" "+Screen.fullScreenMode);                base.OnChangeOption();    }}/// <summary>/// 修改刷新率/// </summary>public class SO_RefreshRate : OptionFuction{    //public string optionName = "RefreshRate";    public List<int> refreshRateList=new List<int> { 60,75,120,144};    public override void InitOptionEntity(OptionEntity dropDownEntity)    {        base.InitOptionEntity(dropDownEntity);        var list = new List<TMP_Dropdown.OptionData>();        var refList = refreshRateList;        for (int i = 0; i < refList.Count; i++)        {            list.Add(new TMP_Dropdown.OptionData((float)refList[i] + " Hz"));        }        DD.AddOptions(list);        SetValueByState();    }    public override void OnChangeOption()    {        /*var w= Screen.currentResolution.width ;        var h = Screen.currentResolution.height;*/        var resolution = UIM_SettingManager.GetOptionFuction<SO_Resolution>() as SO_Resolution;                var v2= resolution.resolutionList[resolution.optionState.value] ;        var w = v2.x;        var h = v2.y;                        /*// 修改分辨率        // 获取当前显示器的刷新率        RefreshRate currentRefreshRate = Screen.currentResolution.refreshRateRatio;*/                        // 或者创建一个新的RefreshRate        RefreshRate desiredRefreshRate = new RefreshRate { numerator = (uint)refreshRateList[optionState.value], denominator = 1 };        // 使用新方法设置分辨率        Screen.SetResolution((int)w, (int)h, Screen.fullScreenMode, desiredRefreshRate);        /*Screen.SetResolution(w,h, Screen.fullScreenMode, refreshRateList[optionState.value]);*/        base.OnChangeOption();    }}/// <summary>/// 改变图像质量/// </summary>public class SO_Quality : OptionFuction{    //public string optionName = "Quality";        public override void InitOptionEntity(OptionEntity dropDownEntity)    {        base.InitOptionEntity(dropDownEntity);        var ddQuality = dropDownEntity.butTwoHead.targetDrop;        ddQuality.ClearOptions();        var list = new List<TMP_Dropdown.OptionData>();        // 获取所有画面质量级别的名称和数量        string[] qualityNames = QualitySettings.names;        var qualityCount = QualitySettings.names.Length;        // 打印输出所有画面质量级别的名称和数量        //Debug.Log("Quality Levels:");        for (int i = 0; i < qualityCount; i++)        {            //Debug.Log(qualityNames[i]);            list.Add(new TMP_Dropdown.OptionData(qualityNames[i]));        }        //Debug.Log("Total Quality Levels: " + qualityCount);        ddQuality.AddOptions(list);        SetValueByState();    }    public override void OnChangeOption()    {        QualitySettings.SetQualityLevel(optionState.value);        UIM_UIManager.Instance.RefreshLayoutsRecursively();        base.OnChangeOption();    }}/// <summary>/// 修改抗锯齿/// </summary>public class SO_AntiAliasing : OptionFuction{    //public string optionName = "AntiAliasing";    public List<int> antiAliasingList = new List<int>() { 2,4,8,16,32};    public override void InitOptionEntity(OptionEntity dropDownEntity)    {        base.InitOptionEntity(dropDownEntity);        var ddAntiAliasing = dropDownEntity.butTwoHead.targetDrop;        ddAntiAliasing.ClearOptions();        var list = new List<TMP_Dropdown.OptionData>();        var antiList = antiAliasingList;        for (int i = 0; i < antiList.Count; i++)        {            list.Add(new TMP_Dropdown.OptionData((float)antiList[i] + "x MSAA"));        }        ddAntiAliasing.AddOptions(list);        SetValueByState();    }    public override void OnChangeOption()    {        // 修改抗锯齿模式        QualitySettings.antiAliasing = antiAliasingList[optionState.value];        base.OnChangeOption();    }}/// <summary>/// 调整垂直同步/// </summary>public class SO_vSync : OptionFuction{    //public string optionName = "vSync";    public override void InitOptionEntity(OptionEntity dropDownEntity)    {        base.InitOptionEntity(dropDownEntity);        InitiaOptions(DPmod.布尔);    }    public override void OnChangeOption()    {        // 切换垂直同步模式        QualitySettings.vSyncCount = optionState.value == 0 ? 1 : 0;        base.OnChangeOption();    }}/// <summary>/// 修改帧率/// </summary>public class SO_FrameRate : OptionFuction{    //public string optionName = "SO_FrameRate";    public List<int> frameRateList=new List<int> { 30,60,90,120};    public override void InitOptionEntity(OptionEntity dropDownEntity)    {        base.InitOptionEntity(dropDownEntity);        var ddFrameRate = dropDownEntity.butTwoHead.targetDrop;        ddFrameRate.ClearOptions();        var list = new List<TMP_Dropdown.OptionData>();        var fList = frameRateList;        for (int i = 0; i < fList.Count; i++)        {            list.Add(new TMP_Dropdown.OptionData((float)fList[i] + " FPS"));        }        ddFrameRate.AddOptions(list);        SetValueByState();    }    public override void OnChangeOption()    {        Application.targetFrameRate = frameRateList[optionState.value];        base.OnChangeOption();    }}#endregion#region 音效/// <summary>/// 音量大小调整/// </summary>public class SO_AudioVol : OptionFuction{    public string audioKey;    public override void InitOptionEntity(OptionEntity dropDownEntity)    {           base.InitOptionEntity(dropDownEntity);        InitiaOptions(DPmod.步进);    }    public override void OnChangeOption()    {        var f = Mathf.Lerp(-80, 20, ((float)optionState.value / (sliderStep - 1)));        //必须包含音效管理器        UIM_AudioManager.Instance._mixer.SetFloat(audioKey, f);        base.OnChangeOption();    }}/// <summary>/// 切出时静音/// </summary>public class SO_SwitchOutMute:OptionFuction{    public override void InitOptionEntity(OptionEntity dropDownEntity)    {        base.InitOptionEntity(dropDownEntity);        InitiaOptions(DPmod.布尔);    }    public override void OnChangeOption()    {        base.OnChangeOption();    }}#endregion#region 后处理public abstract class SO_PPVolume : OptionFuction{    public Volume GetVolume()    {        return UIM_SettingManager.Instance.GetComponent<Volume>();    }}public class SO_ChromaticAberration : SO_PPVolume{    public override void InitOptionEntity(OptionEntity dropDownEntity)    {        base.InitOptionEntity(dropDownEntity);        InitiaOptions(DPmod.布尔);    }    public override void OnChangeOption()    {        if (GetVolume() == null) return;        GetVolume().profile.TryGet<ChromaticAberration>(out var x);        x.active = optionState.value == 0 ? true : false;        base.OnChangeOption();    }}public class SO_FlimGrain : SO_PPVolume{    public override void InitOptionEntity(OptionEntity dropDownEntity)    {        base.InitOptionEntity(dropDownEntity);        InitiaOptions(DPmod.布尔);    }    public override void OnChangeOption()    {        if (GetVolume() == null) return;        GetVolume().profile.TryGet<FilmGrain>(out var x);        x.active = optionState.value == 0 ? true : false;        base.OnChangeOption();    }}public class SO_Vignette : SO_PPVolume{    public override void InitOptionEntity(OptionEntity dropDownEntity)    {        base.InitOptionEntity(dropDownEntity);        InitiaOptions(DPmod.布尔);    }    public override void OnChangeOption()    {        if (GetVolume() == null) return;        GetVolume().profile.TryGet<Vignette>(out var x);        x.active = optionState.value == 0 ? true : false;        base.OnChangeOption();    }}#endregion#region 游戏public class SO_AllowedGF : OptionFuction{    public override void InitOptionEntity(OptionEntity dropDownEntity)    {        base.InitOptionEntity(dropDownEntity);        InitiaOptions(DPmod.布尔);    }    public override void OnChangeOption()    {        base.OnChangeOption();    }}public class SO_AllowedDataUpdate : OptionFuction{    public override void InitOptionEntity(OptionEntity dropDownEntity)    {        base.InitOptionEntity(dropDownEntity);        InitiaOptions(DPmod.布尔);    }    public override void OnChangeOption()    {        base.OnChangeOption();    }}#endregion#region 功能性public class SO_DividingLine:OptionFuction{}public class SO_Subheading : OptionFuction{}#endregion