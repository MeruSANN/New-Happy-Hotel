using System.Collections.Generic;using UnityEditor;using UnityEngine;using UnityEngine.Audio;/*using UnityEngine.Localization;using UnityEngine.Localization.Settings;*/using UnityEngine.ResourceManagement.AsyncOperations;using UnityEngine.UI;using UnityEngine.Rendering;using UnityEngine.Rendering.Universal;using System;using System.Threading.Tasks;using Sirenix.OdinInspector;using UnityEngine.SceneManagement;/// <summary>/// 负责setting数据管理，统一调配存储/// </summary>[AddComponentMenu("UIMaster/Setting/SettingManager")][DisallowMultipleComponent]public class UIM_SettingManager : UIM_UniversalManager<UIM_SettingManager>{        AsyncOperationHandle m_InitialzeOperation;        [LabelText("原始数据")]    [InlineEditor]    public OptionFuctionListSO optionFuctionListSO;    [ShowIf("$curOptionStateSO")]    public OptionStateListSO curOptionStateSO;        [LabelText("色板")]    [InlineEditor]    public SO_UIPalette curPalette;    private Volume volume;    public async void Start()    {        await Task.Yield();        //选项初始化        //OnApplyAndSave();        //基础设置        //Cursor.lockState = CursorLockMode.Confined;        Application.runInBackground = true;            }        private void Update()    {        // 在后台时也继续播放声音        if (Application.isFocused)        {            AudioListener.pause = false;        }        else        {            AudioListener.pause = false; // 确保声音在后台时不暂停        }    }    public override async void InitManager()    {        base.InitManager();        await Task.Yield();                OnApplyAndSave();            }        /// <summary>    /// 遍历每个数据方法，并且执行    /// </summary>    public async void OnApplyAndSave()    {                                await Task.Yield();                //存储后处理，一般挂在在manager上                volume = GetComponent<Volume>();                //创建一个新的局内数据        curOptionStateSO = ScriptableObject.CreateInstance< OptionStateListSO>();        //读取到本地数据        UIM_SaveLoad.LoadData(curOptionStateSO, "SettingData");        //Debug.Log($"{curOptionStateSO}已找到共有{curOptionStateSO.optionStateList.Count}个");                                //遍历每个数据方法，执行一遍        foreach (var item in optionFuctionListSO.OptionFuctionList)        {            await item.InitOptionState();        }                //再直接存储一下数据        curOptionStateSO.SaveData();    }                public void RefreshDropText(Dropdown dropdown)    {        dropdown.RefreshShownValue();    }    /// <summary>    /// 将数据恢复初始化    /// </summary>    public void OnReSetOptions()    {        //将当前状态变回默认值，并且存储        foreach (var item in optionFuctionListSO.OptionFuctionList)        {            item.optionState.value = item.defaultValue;            item.SetValueByState();        }        curOptionStateSO.SaveData();        Debug.Log( UIM_DebugManager.Log("设置数据已恢复为初始默认值!", "成功", "数据"));    }    /// <summary>    /// 打开当前设置的本地数据    /// </summary>    [Button("打开本地设置数据")]    public void OpenSetData()    {        UIM_SaveLoad.OpenData("SettingData");    }    /// <summary>    /// 打开当前设置的本地数据    /// </summary>    [Button("打开本地文件夹")]    public void OpenDataFile()    {        UIM_SaveLoad.OpenData();    }    #region 设置数据调用    /// <summary>    /// 根据传入的类型，获取在list中对应类型的值    /// </summary>    /// <typeparam name="T"></typeparam>    /// <returns></returns>    public static int GetValueByOption<T>()    {        return GetOptionFuction<T>().optionState.value;    }    /// <summary>    /// 获得对应语种类的设置选项    /// </summary>    /// <typeparam name="T"></typeparam>    /// <returns></returns>    public static OptionFuction GetOptionFuction<T>()    {                                if (Instance == null) return null;        var list = Instance.optionFuctionListSO.OptionFuctionList;        int index = list.FindIndex((i) => i is T);        if (index != -1)        {            return list[index];        }        else        {            return null;        }    }    #endregion}