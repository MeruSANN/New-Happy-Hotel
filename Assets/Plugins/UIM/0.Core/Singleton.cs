using System;using System.Collections;using System.Collections.Generic;using UnityEngine;public class Singleton<T> : MonoBehaviour where T : Singleton<T>{    private static T m_Instance = null;    //避免退出游戏后访问创建新的单例    private static bool isQuitApp = false;    public static T Instance    {        get        {            if (isQuitApp)            {                return null;            }            if (m_Instance == null)            {                m_Instance = GameObject.FindObjectOfType(typeof(T)) as T;                if (m_Instance == null)                {                    Debug.LogWarning("Singleton of " + typeof(T).Name + " is null,start re-create");                    m_Instance = new GameObject("Singleton of " + typeof(T).Name).AddComponent<T>();                }                m_Instance.Init();            }            return m_Instance;        }    }    public static bool Initialized => m_Instance != null && !isQuitApp;        protected virtual void Awake()    {        if (m_Instance == null)        {            m_Instance = this as T;            m_Instance.Init();        }    }    /// <summary>    /// 继承类初始化用    /// </summary>    public virtual void Init() { }    private void OnDestroy() {        m_Instance = null;    }    private void OnApplicationQuit()    {        isQuitApp = true;    }}