using System.Collections;using System.Collections.Generic;using System.Threading.Tasks;using UnityEngine;using Sirenix.OdinInspector;using UnityEngine.Serialization;/// <summary>/// 特效管理器/// </summary>public class EffectManager : Singleton<EffectManager>{        [LabelText("特效池管理器")]    [InlineEditor]    public SoEffectDeck soEffects;                private void Awake()    {    }    void  OnEnable()    {        //注入到抽象方法中        EffectFunclib.SetEffectSystem(this);        for (int i = 0; i < soEffects.EffectsList.Count; i++)        {                        soEffects.EffectsList[i].ResetPool(transform);                    }    }    public async void PlayEffect(string key, Vector3 position)    {                        var _effects = soEffects.GetEffect(key);            // 如果池意外丢失，重建它        if(_effects.effectPool == null || _effects.effectPool.Count == 0)        {            _effects.ResetPool(transform);        }                        //yield return new WaitForEndOfFrame();        await Task.Delay((int)(Time.deltaTime * 500));//=====================        for (int i = 0; i < _effects.effectPool.Count; i++)        {            if (_effects.effectPool[i] != null && !_effects.effectPool[i].activeInHierarchy)            {                _effects.effectPool[i].transform.position = position;                _effects.effectPool[i].SetActive(true);                break;            }        }        Debug.Log(string.Format("<color=yellow>[播放特效完成]</color>:{0}已于{1}播放完成。",_effects.effectPrefab,position));    }}