using System;using System.Collections;using System.Collections.Generic;using System.Runtime.Serialization;using UnityEngine;using Sirenix.OdinInspector;using UnityEngine.Serialization;[CreateAssetMenu(fileName = "Effects", menuName = "Custom/Effects", order = 1)]public class SO_Effects : ScriptableObject{    [LabelText("索引值")]    public string key;        [LabelText("效果对象")]    public GameObject effectPrefab; // 效果对象    [NonSerialized]    public Transform poolTransform;    [LabelText("对象池初始数量")]    public int poolSize ; // 对象池初始数量    [LabelText("对象池")]    [NonSerialized]    public List<GameObject> effectPool = new List<GameObject>();     // 添加重置方法    public void ResetPool(Transform poolTrans)    {        Debug.Log("对象池开始重建");        if (poolTransform!=null)return;                        //重置对象池方法        var name = string.Format("EffectPoll_{0}", effectPrefab.name);        //如果能找到 已创建过的对象池        if ( poolTrans.Find(name) )        {            Debug.Log("已存在对象池物体");            poolTransform=poolTrans.Find(name);            foreach (Transform  child in poolTransform.transform)            {                effectPool=new List<GameObject>();                effectPool.Add(child.gameObject);                                }                        }        else        {            //创建对象池父物体            GameObject emptyObject = new GameObject(name);            // 设置空子物体的父物体为当前物体            emptyObject.transform.SetParent(poolTrans);                   poolTransform = emptyObject.transform;                            //创建对象池需要先清空            if(effectPool != null) effectPool.Clear();                    for (int i = 0; i <poolSize; i++)            {                GameObject effect = Instantiate(effectPrefab, poolTransform.position, Quaternion.identity);                effect.transform.SetParent(poolTransform);                effect.SetActive(false); // 初始时将特效对象设置为非激活状态                effectPool.Add(effect);            }                        }            }                }