using System.Collections;using System.Collections.Generic;using Sirenix.OdinInspector;using UnityEngine;using static UnityEngine.Rendering.DebugUI;public class BlurRenderer : Singleton<BlurRenderer>{    public Camera blurCamera;    [InlineEditor]    public Material blurMaterial;    public Material CurrentMaterial;        public float duration = 2f;    private float elapsed;    private Color tragetColor;    private float tragetValue;        private void Start()    {                if(blurCamera.targetTexture != null)        {            blurCamera.targetTexture.Release();        }        blurCamera.targetTexture = new RenderTexture(Screen.width,Screen.height,24,RenderTextureFormat.ARGB32,1);        CurrentMaterial = Instantiate(blurMaterial);                CurrentMaterial.SetTexture("_MainTex", blurCamera.targetTexture);        tragetColor = CurrentMaterial.GetColor("_Tint");        tragetValue = CurrentMaterial.GetFloat("_BlurValue");    }    public IEnumerator AnimateColor(bool isfadein=false)    {        elapsed = 0f;        Color Acolor, Bcolor;        float Avalue, Bvalue;        //是否为隐藏，是为初始，否为目标        Acolor = isfadein ? new Color(1, 1, 1, 0) : tragetColor;        Bcolor = isfadein ? tragetColor : new Color(1,1,1,0);        Avalue = isfadein ? 0f : tragetValue;        Bvalue = isfadein ? tragetValue : 0f;        while (elapsed<duration)        {            elapsed += Time.deltaTime;            //偏移值改变            //颜色改变            float value = elapsed / duration;            CurrentMaterial.SetColor("_Tint",Color.Lerp(Acolor,Bcolor,value));            CurrentMaterial.SetFloat("_BlurValue",Mathf.Lerp(Avalue,Bvalue,value));            yield return null;        }    }    public void ResetBlur()    {        CurrentMaterial.SetColor("_Tint", tragetColor);        CurrentMaterial.SetFloat("_BlurValue", tragetValue);        //Debug.Log("1");    }}