using System.Collections.Generic;using UnityEngine;using UnityEngine.UI;using Sirenix.OdinInspector;using UIM;[System.Serializable]public struct ButContent{    public Button but;    [LabelText("目标对象")]    public List<string> targetKeys;    [LabelText("目标开关")]    public bool isOpen;    [LabelText("是否自动关闭此物体")]    public bool autoCloseSelf;    public ButContent(Button b, List<string> to, bool o=true,bool close=true)    {        but = b;        targetKeys = to;        isOpen = o;        autoCloseSelf = close;    }}[AddComponentMenu("UIMaster/Button/PanelManager")][DisallowMultipleComponent]public class UIM_PanelManager : MonoBehaviour{    public List<ButContent> butContentsList;    [LabelText("默认初始按钮")]    [SerializeField] private GameObject _defaultButton;    public GameObject DefaultButton    {        get => _defaultButton;        set => _defaultButton = value; // 简单情况可以直接赋值    }    //给声明的按钮挂委托    //设定时，如果是开启    protected  virtual void Awake()    {        if (butContentsList.Count == 0) return;        foreach (var item in butContentsList)        {            item.but.onClick.AddListener(delegate { Switch(item); });                    }    }    void OnEnable()    {        if (UIM_UIManager.Instance)        {            // 通知 UIManager 此 Panel 已打开            UIM_UIManager.Instance.OnPanelOpened(gameObject);            UIM_UIManager.Instance.RefreshLayoutsRecursively(transform);        }    }    public void Switch(ButContent butContent)    {        //开启当前对象，如果没有当前对象，则创建预设对象        foreach (var item in butContent.targetKeys)        {            UIM_PanelsManager.Instance.SetPanelActive(item, butContent.isOpen);        }        //判断是不是要关闭自身        if (!butContent.autoCloseSelf) return;        UIM_UIManager.SwitchPanel(gameObject);    }    public void DeactivatePanel()    {        gameObject.SetActive(false);    }}