using Sirenix.OdinInspector;using System.Collections.Generic;using UnityEngine;using UnityEngine.SceneManagement;using UIM;public class UIM_PanelsManager : Singleton<UIM_PanelsManager>{        private Animator animator;    [SerializeField, LabelText("Panel 注册表")]    [InlineEditor]        public PanelRegeditSO regeditSO;    [LabelText("初始化 Panel 键")]    public string initPanelKey;    protected override void Awake()    {        base.Awake();        if (Instance != null && Instance != this)        {            Destroy(gameObject);            return;        }                animator = GetComponent<Animator>();          }    private void Start()    {        InitPanel();    }    /// <summary>    /// 初始化生成面板    /// </summary>    public void InitPanel()    {        if (!string.IsNullOrEmpty(initPanelKey))        {            SetPanelActive(initPanelKey, true);        }    }    /// <summary>    /// 设置面板激活状态    /// </summary>    /// <param name="key">面板键</param>    /// <param name="active">激活状态</param>    public void SetPanelActive(string key, bool active)    {        if (string.IsNullOrEmpty(key)) return;        GameObject obj = GetPanelObject(key);        if (obj == null)        {            Debug.LogWarning($"未找到键为 {key} 的面板。");            return;        }        obj.SetActive(active);        Animator panelAnimator = obj.GetComponent<Animator>() ?? obj.AddComponent<Animator>();        panelAnimator.SetBool("ISSWITCH", !active);        Debug.Log($"面板 {key} 状态已设置为 {active}");        UIM_UIManager.Instance?.RefreshLayoutsRecursively();    }    /// <summary>    /// 获取面板对象    /// </summary>    /// <param name="key">面板键</param>    /// <returns>面板对象</returns>    private GameObject GetPanelObject(string key)    {        foreach (var item in regeditSO.PanelItemList)        {            if (item.key == key)            {                if (item.currentObj == null)                {                    item.currentObj = Instantiate(item.obj, transform);                }                return item.currentObj;            }        }        return null;    }    /// <summary>    /// 触发 Canvas 激活动画    /// </summary>    public void TriggerCanvasAnimation()    {        animator?.SetTrigger("ISACTIVE");    }}