using System;using System.Collections;using System.Collections.Generic;using UnityEngine;using Sirenix.OdinInspector;using TMPro;using UnityEngine.InputSystem;using UnityEngine.UI;/*using UnityEngine.Localization.Components;*/using I2.Loc;using UIM.Input;public class UIM_InputTipsPanel : Singleton<UIM_InputTipsPanel>{        public GameObject linkStatePanel;    public TMP_Text stateText;    public GameObject modePanel;    public Image modeSR;    public Sprite gamepadIcon, mouseKeyboardIcon;    private void Awake()    {    }    private UIM_InputSystem InputManager;        private void Start()    {        InputManager = UIM_InputSystem.Instance;        InputManager.OnSwitchControlMode.AddListener(delegate { UpdateModeTips(InputManager.currentMode);});                /*InputManager.OnSwitchControlMode += UpdateLinkState;*/    }    private void OnDisable()    {        InputManager.OnSwitchControlMode.RemoveListener(delegate {  UpdateModeTips(InputManager.currentMode);});    }    private void UpdateModeTips(ControlMode mode)    {                switch (mode)        {            case ControlMode.KeyboardMouse:                modeSR.sprite = mouseKeyboardIcon;                break;            case ControlMode.Gamepad:                modeSR.sprite = gamepadIcon;                break;                    }        StartCoroutine(Wait(modePanel));    }    /// <summary>    /// 更新当前显示模式    /// </summary>    /// <param name="text"></param>    /// <param name="icon"></param>    public void UpdateLinkState(string text, ControlMode cm)    {        LocalFunclib.SetLocalizedString(stateText.GetComponent<Localize>(),text);             StartCoroutine(Wait(linkStatePanel));            }    /// <summary>    /// 延迟处理动画效果    /// </summary>    /// <param name="obj"></param>    /// <returns></returns>    public IEnumerator Wait(GameObject obj)    {        obj.SetActive(true);        obj.GetComponent<Animator>().SetTrigger("ISACTIVE");        yield return new WaitForSeconds(1f);        obj.SetActive(false);    }}