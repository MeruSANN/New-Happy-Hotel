using HappyHotel.Buff.Components;
using HappyHotel.Buff.Settings;
using HappyHotel.Core;
using HappyHotel.Core.BehaviorComponent;
using HappyHotel.Core.Combat;
using UnityEngine;

namespace HappyHotel.Buff
{
    // 本回合内：当持有者进行攻击命中后，为目标添加 AttackDamageTakenIncreaseBuff（层数=本Buff设置层数）
    public class AttackOnHitVulnerabilityBuff : BuffBase
    {
        private AttackEventHub hub;
        private int layersPerHit = 1;

        public void SetLayersPerHit(int layers)
        {
            layersPerHit = Mathf.Max(1, layers);
        }

        public override void OnApply(IComponentContainer target)
        {
            var container = buffContainer?.GetHost() as BehaviorComponentContainer;
            if (container == null) return;

            hub = container.GetBehaviorComponent<AttackEventHub>() ?? container.AddBehaviorComponent<AttackEventHub>();
            if (hub != null)
            {
                hub.onAfterDealDamage += OnAfterDealDamage;
            }
        }

        public override void OnRemove(IComponentContainer target)
        {
            if (hub != null)
            {
                hub.onAfterDealDamage -= OnAfterDealDamage;
                hub = null;
            }
        }

        public override void OnTurnEnd(int turnNumber)
        {
            // 回合结束移除自身
            RequestRemoveSelf();
        }

        public override int GetValue()
        {
            return layersPerHit;
        }

        public override BuffMergeResult TryMergeWith(BuffBase newBuff)
        {
            if (newBuff is AttackOnHitVulnerabilityBuff other)
            {
                layersPerHit += other.layersPerHit;
                return BuffMergeResult.CreateMerge(this);
            }
            return BuffMergeResult.CreateCoexist();
        }

        private void OnAfterDealDamage(AttackEventData data)
        {
            var host = buffContainer?.GetHost() as BehaviorComponentContainer;
            if (host == null) return;
            if (data.Attacker != host) return;
            if (data.Target == null) return;
            if (layersPerHit <= 0) return;

            var targetContainer = data.Target;
            var targetBuffContainer = targetContainer.GetBehaviorComponent<BuffContainer>() ?? targetContainer.AddBehaviorComponent<BuffContainer>();
            if (targetBuffContainer == null) return;

            var setting = new AttackDamageTakenIncreaseSetting(layersPerHit);
            var buff = BuffManager.Instance.Create("AttackDamageTakenIncrease", setting);
            if (buff != null)
            {
                targetBuffContainer.AddBuff(buff);
            }
        }
        
        protected override string FormatDescriptionInternal(string formattedDescription)
        {
            return formattedDescription.Replace("{layer}", layersPerHit.ToString());
        }
    }
}


